// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customer.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addCustomer = `-- name: AddCustomer :exec
INSERT INTO customer (first_name, last_name, address, username, password)
VALUES ($1, $2, $3, $4, $5)
`

type AddCustomerParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Address   string `json:"address"`
	Username  string `json:"username"`
	Password  []byte `json:"password"`
}

func (q *Queries) AddCustomer(ctx context.Context, arg AddCustomerParams) error {
	_, err := q.db.Exec(ctx, addCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Address,
		arg.Username,
		arg.Password,
	)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, first_name, last_name, address, username, password FROM customer
WHERE id = $1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const removeCustomer = `-- name: RemoveCustomer :exec
DELETE FROM customer
WHERE id = $1
`

func (q *Queries) RemoveCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeCustomer, id)
	return err
}
